/********************************************************************
 *
 * PROJECT:     Character Map
 * MODULE:      Application Header
 * FILE:        app.goh
 *
 * AUTHOR:      Nathan Fiedler
 *
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      NF      9/23/96         Initial version
 *
 * DESCRIPTION:
 *      This file is the application header file. It contains the
 *      constants, data type definitions, and class definitions.
 *
 *******************************************************************/

#ifndef __APP_GOH
#define __APP_GOH

  /*
   * Search other files for "platform" to find code that
   * cannot be conditionally compiled.
   */
#define DESKTOP
@define DESKTOP
/*
#define ZOOMER
@define ZOOMER
#define OMNIGO
@define OMNIGO
*/

/********************************************************************
 *              Constants
 *******************************************************************/
      /* Box height and width in points. */
#ifdef DESKTOP
    #define CHARM_BOX_WIDTH  18
    #define CHARM_BOX_HEIGHT 18
#endif
#ifdef ZOOMER
    #define CHARM_BOX_WIDTH  14
    #define CHARM_BOX_HEIGHT 15
#endif
#ifdef OMNIGO
    #define CHARM_BOX_WIDTH  14
    #define CHARM_BOX_HEIGHT 12
#endif

      /* Magnified character size. */
    #define CHARM_MAG_HEIGHT 28
    #define CHARM_MAG_WIDTH  28

      /* Default point size of map text. */
#ifdef DESKTOP
    #define CHARM_MAP_TEXT_POINT_SIZE 14
#endif
#ifdef ZOOMER
    #define CHARM_MAP_TEXT_POINT_SIZE 12
#endif
#ifdef OMNIGO
    #define CHARM_MAP_TEXT_POINT_SIZE 9
#endif
    #define CHARM_MAP_MAG_TEXT_SIZE   27

      /* Map height and width in boxes. */
    #define CHARM_MAP_HEIGHT 14
    #define CHARM_MAP_WIDTH  16

      /* Boundaries of the map. */
    #define CHARM_MAP_LEFT   0
    #define CHARM_MAP_TOP    0
    #define CHARM_MAP_RIGHT  ( CHARM_BOX_WIDTH * CHARM_MAP_WIDTH )
    #define CHARM_MAP_BOTTOM ( CHARM_BOX_HEIGHT * CHARM_MAP_HEIGHT )

      /* Size of map in points. */
    #define CHARM_MAP_PT_HEIGHT   ( CHARM_MAP_BOTTOM - CHARM_MAP_TOP )
    #define CHARM_MAP_PT_WIDTH    ( CHARM_MAP_RIGHT - CHARM_MAP_LEFT )
    #define CHARM_MAP_HALF_HEIGHT ( CHARM_MAP_PT_HEIGHT / 2 )
    #define CHARM_MAP_HALF_WIDTH  ( CHARM_MAP_PT_WIDTH / 2 )

/********************************************************************
 *              Data Types
 *******************************************************************/
      /* Shortcut character type. Used to show the keystroke
       * used to generate a particular character. */
    typedef struct {
        ShiftState    CMCT_states;
        unsigned char CMCT_accent;
        unsigned char CMCT_char;
    } CMCharType;

/********************************************************************
 *              Class Definitions
 *******************************************************************/
      /* This does some startup and shutdown stuff. */
    @class CMProcessClass, GenProcessClass;
    @endc;

      /* Need to intercept a couple of messages. */
    @class CMTextClass, GenTextClass;
      /* Copy text object to clipboard. */
    @message void MSG_CM_TEXT_COPY_TEXT();
    @endc;

      /* Map class - Manages character map and
       * does most of the work. */
    @class CMMapClass, VisContentClass;
      /* Changes the font used to draw with. */
    @message void MSG_CM_MAP_CHANGE_FONT( FontID fid );
      /* Forces redraw of the content. */
    @message void MSG_CM_MAP_REDRAW();
      /* Forces redraw of two magchar regions. */
    @message void MSG_CM_MAP_REDRAW_MAG_CHAR();
      /* Copy selected character to text object. */
    @message void MSG_CM_MAP_SELECT_CHAR();
      /* Create/destroy the pointer definition table. */
    @message void MSG_CM_MAP_CREATE_POINTER_DEF();
    @message void MSG_CM_MAP_DESTROY_POINTER_DEF();
      /* Mouse pointer image manipulation messages. */
    @message void MSG_CM_MAP_SET_POINTER_IMAGE();
    @message void MSG_CM_MAP_RESET_POINTER_IMAGE();
          /* Current and previous characters. */
        @instance unsigned char CMMI_crCurrent;
        @instance unsigned char CMMI_crPrevious;
          /* Current font ID to draw with. */
        @instance FontID CMMI_curFont;
          /* TRUE if user is dragging mouse or cursoring around. */
        @instance Boolean CMMI_bDragging;
        @instance Boolean CMMI_bCursoring;
          /* Mouse pointer image definition. */
        @instance optr CMMI_odPtrDef;
    @endc;

      /* Optimize drawing by creating row objects. */
    @class CMRowClass, VisClass;
          /* Character at start of row. */
        @instance unsigned char CMRI_crStart;
    @endc;

#endif

